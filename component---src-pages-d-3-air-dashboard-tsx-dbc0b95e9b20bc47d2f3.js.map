{"version":3,"sources":["webpack:///./src/pages/d3.airDashboard.tsx"],"names":["TempDashboard","mergedWeatherData","useState","canvas","setCanvas","useDetectElementResize","id","width","useEffect","select","selectAll","remove","scaffoldCanvas","populateGraph","containerDiv","window","document","getElementById","clientWidth","height","clientHeight","svg","append","attr","x","defaultCanvas","left","right","y","top","bottom","node","data","DateArr","map","d","datetime","undefined","filter","removeUndefined","range","extent","scaleTime","domain","tempArr","air_temperature_at_2m_above_ground_level","tempRange","lowestTemp","highestTemp","scaleLinear","_line","line","curve","curveNatural","enter","t","a","console","log","style","call","axisBottom","tickFormat","date","formatMillisecond","timeFormat","formatSecond","formatMinute","formatHour","formatDay","formatWeek","formatMonth","formatYear","timeSecond","timeMinute","timeHour","timeDay","timeMonth","timeWeek","timeYear","axisLeft","ticks","Math","min","round","floor","text","className","minHeight","textAlign","borderBottom","padding"],"mappings":"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","file":"component---src-pages-d-3-air-dashboard-tsx-dbc0b95e9b20bc47d2f3.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Container } from \"semantic-ui-react\";\nimport { select } from \"d3-selection\";\nimport { timeFormat } from \"d3-time-format\";\nimport {\n  timeSecond,\n  timeMinute,\n  timeHour,\n  timeDay,\n  timeMonth,\n  timeWeek,\n  timeYear,\n} from \"d3-time\";\nimport { extent } from \"d3-array\";\nimport { scaleTime, scaleLinear } from \"d3-scale\";\nimport { line, curveNatural } from \"d3-shape\";\nimport { axisBottom, axisLeft } from \"d3-axis\";\nimport { MergedWeatherDataType, removeUndefined } from \"../api/weatherData\";\nimport { CanvasType, defaultCanvas } from \"../utils/canvas\";\nimport { useDetectElementResize } from \"use-element-resize\";\n\nconst graphDiv = \".graph-canvas\";\n\nfunction TempDashboard({\n  mergedWeatherData,\n}: {\n  mergedWeatherData: MergedWeatherDataType[] | undefined;\n}) {\n  const [canvas, setCanvas] = useState<CanvasType>();\n  const target = { id: \"graph-canvas-weather\" };\n  const [width, height] = useDetectElementResize(target);\n\n  const clearGraph = () => {\n    select(graphDiv).selectAll(\"*\").remove();\n  };\n\n  useEffect(() => {\n    clearGraph();\n    const canvas = scaffoldCanvas();\n    if (canvas) {\n      setCanvas(canvas);\n    }\n  }, [mergedWeatherData, width]);\n\n  useEffect(() => {\n    populateGraph();\n  }, [canvas]);\n\n  const scaffoldCanvas = (): CanvasType | undefined => {\n    const containerDiv = window.document.getElementById(\"graph-canvas-weather\");\n    if (containerDiv && mergedWeatherData) {\n      const width = containerDiv?.clientWidth ?? 0;\n      const height = containerDiv?.clientHeight ?? 0;\n      const svg = select(graphDiv)\n        .append(\"svg\")\n        .attr(\"height\", height)\n        .attr(\"width\", width);\n      const x = width - (defaultCanvas.left + defaultCanvas.right);\n      const y = height - (defaultCanvas.top + defaultCanvas.bottom);\n      const node = svg\n        .append(\"g\")\n        .attr(\n          \"transform\",\n          \"translate(\" + defaultCanvas.left + \",\" + defaultCanvas.top + \")\"\n        );\n      // const dataset: {\n      //   key: string;\n      //   values: any;\n      //   value: undefined;\n      // }[] = nest<MergedWeatherDataType>()\n      //   .key(function () {\n      //     return \"Temperature\";\n      //   })\n      //   .rollup((d: MergedWeatherDataType[]) => {\n      //     console.log(d);\n      //     debugger;\n      //     return d[0] as MergedWeatherDataType;\n      //   })\n      //   .entries(mergedWeatherData);\n      return {\n        x,\n        y,\n        node,\n        // dataset,\n      };\n    }\n    return undefined;\n  };\n\n  const populateGraph = () => {\n    if (mergedWeatherData && canvas) {\n      const data = mergedWeatherData;\n\n      /** Time on x axis */\n      const DateArr = data\n        .map((d) => d.datetime ?? undefined)\n        .filter(removeUndefined);\n      const range = extent(DateArr) as [Date, Date];\n      const x = scaleTime().range([0, canvas.x]).domain(range);\n\n      /** Temp on y axis */\n      const tempArr = data\n        .map((d) => d.air_temperature_at_2m_above_ground_level ?? undefined)\n        .filter(removeUndefined);\n      const tempRange = extent(tempArr) as [number, number];\n      const [lowestTemp, highestTemp] = tempRange;\n      const y = scaleLinear()\n        .range([canvas?.y ?? 0, 0])\n        .domain([lowestTemp, highestTemp]);\n\n      const _line = line<MergedWeatherDataType>()\n        .curve(curveNatural)\n        .x(function (d: MergedWeatherDataType) {\n          return x(d.datetime ?? 0);\n        })\n        .y(function (d) {\n          const yAxis = y(d.air_temperature_at_2m_above_ground_level ?? 0);\n          return y(d.air_temperature_at_2m_above_ground_level ?? 0);\n        });\n\n      const lineGraph = canvas.node.append(\"g\");\n\n      canvas.node\n        .append(\"g\")\n        .selectAll(\".location\")\n        .data([mergedWeatherData[0]])\n        .enter()\n        .append(\"g\")\n        .attr(\"class\", \"location\")\n        .append(\"path\")\n        .attr(\"class\", \"line\")\n        .attr(\"d\", function (d) {\n          const t = _line(\n            mergedWeatherData.filter(\n              (a) => a.air_temperature_at_2m_above_ground_level\n            )\n          );\n          console.log(t);\n          return t;\n        })\n        .style(\"stroke\", function (d) {\n          return \"darkBlue\";\n        })\n        .attr(\"fill\", \"none\");\n\n      canvas?.node\n        .append(\"g\")\n        .attr(\"class\", \"axis axis--x\")\n        .attr(\"transform\", \"translate(0,\" + canvas.y + \")\")\n        .call(\n          axisBottom(x).tickFormat(function (d) {\n            const formatMillisecond = timeFormat(\".%L\"),\n              formatSecond = timeFormat(\":%S\"),\n              formatMinute = timeFormat(\"%H:%M\"),\n              formatHour = timeFormat(\"%H:00\"),\n              formatDay = timeFormat(\"%a %d\"),\n              formatWeek = timeFormat(\"%b %d\"),\n              formatMonth = timeFormat(\"%B\"),\n              formatYear = timeFormat(\"%Y\"),\n              multiFormat = function (date: Date) {\n                return (timeSecond(date) < date\n                  ? formatMillisecond\n                  : timeMinute(date) < date\n                  ? formatSecond\n                  : timeHour(date) < date\n                  ? formatMinute\n                  : timeDay(date) < date\n                  ? formatHour\n                  : timeMonth(date) < date\n                  ? timeWeek(date) < date\n                    ? formatDay\n                    : formatWeek\n                  : timeYear(date) < date\n                  ? formatMonth\n                  : formatYear)(date);\n              };\n            return multiFormat(d);\n          })\n        );\n\n      canvas.node\n        .append(\"g\")\n        .attr(\"class\", \"axis y-axis\")\n        .call(\n          axisLeft(y).ticks(\n            Math.min(Math.round(Math.floor(canvas.y / 35) + 1), highestTemp),\n            \".0f\"\n          )\n        )\n        .append(\"text\")\n        .attr(\n          \"transform\",\n          \"rotate(-90) translate(\" +\n            -(canvas.y / 2) +\n            \", \" +\n            -defaultCanvas.left * 0.8 +\n            \")\"\n        )\n        .attr(\"class\", \"label\")\n        .attr(\"text-anchor\", \"middle\")\n        .style(\"font-weight\", \"normal\")\n        .style(\"font-size\", \"12px\")\n        .attr(\"y\", 6)\n        .attr(\"dy\", \".35em\")\n        .attr(\"fill\", \"#666\")\n        .text(\"Temp\");\n      canvas.node.selectAll(\".y-axis g text\").attr(\"fill\", \"#666\");\n      canvas.node.selectAll(\".y-axis g line\").attr(\"stroke\", \"#666\");\n\n      const svg = select(\"#my_dataviz-air\");\n\n      // Handmade legend\n      svg\n        .append(\"circle\")\n        .attr(\"cx\", 10)\n        .attr(\"cy\", 10)\n        .attr(\"r\", 6)\n        .style(\"fill\", \"darkBlue\");\n      svg\n        .append(\"text\")\n        .attr(\"x\", 20)\n        .attr(\"y\", 10)\n        .text(\"Air Temp\")\n        .style(\"font-size\", \"15px\")\n        .attr(\"alignment-baseline\", \"middle\");\n    }\n  };\n\n  return (\n    <Container>\n      <div className=\"App\">\n        <div className=\"header\" style={{ minHeight: \"70px\" }}>\n          <h3 className=\"text-muted\">Air Dashboard</h3>\n          <svg id=\"my_dataviz-air\" height=\"30\" width=\"450\"></svg>\n        </div>\n\n        <div\n          style={{\n            textAlign: \"center\",\n            borderBottom: \"1px solid #e5e5e5\",\n            padding: \"0\",\n            minHeight: \"300px\",\n          }}\n          className=\"jumbotron graph-canvas\"\n          id=\"graph-canvas-weather\"\n        />\n      </div>\n    </Container>\n  );\n}\n\nexport default TempDashboard;\n"],"sourceRoot":""}