{"version":3,"sources":["webpack:///./src/pages/d3.windDashboard.tsx"],"names":["WindDashboard","mergedWeatherData","targetId","useState","canvas","setCanvas","target","id","useDetectElementResize","width","useEffect","select","selectAll","remove","scaffoldCanvas","populateGraph","containerDiv","document","getElementById","clientWidth","height","clientHeight","svg","append","attr","x","defaultCanvas","left","right","y","top","bottom","node","timeParse","timeFormat","data","DateArr","map","d","datetime","undefined","filter","removeUndefined","range","extent","scaleTime","domain","windSpeed","wind_speed_at_10m_above_ground_level","windSpeedRange","lowestWindSpd","highestWindSpd","scaleLinear","y1","_line","line","curve","curveNatural","windSpeedData","a","wind_from_direction_at_10m_above_ground_level","enter","style","t","console","log","call","axisBottom","tickFormat","date","formatMillisecond","formatSecond","formatMinute","formatHour","formatDay","formatWeek","formatMonth","formatYear","timeSecond","timeMinute","timeHour","timeDay","timeMonth","timeWeek","timeYear","axisLeft","text","ticks","Math","min","round","floor","className","minHeight","textAlign","borderBottom","padding","replace"],"mappings":"2FAAA,oQAuUeA,UA9Sf,YAIG,IAHDC,EAGC,EAHDA,kBAIMC,EAAW,oBADhB,EAE2BC,qBAArBC,EAFN,KAEcC,EAFd,KAGKC,EAAS,CAAEC,GAAIL,GAHpB,EAIuBM,iCAAuBF,GAAxCG,EAJN,UAUDC,qBAAU,WAHRC,YAbe,eAaIC,UAAU,KAAKC,SAKlC,IAAMT,EAASU,IACXV,GACFC,EAAUD,KAEX,CAACH,EAAmBQ,IAEvBC,qBAAU,WACRK,MACC,CAACX,IAEJ,IAAMU,EAAiB,WACrB,IAAME,EAAeC,SAASC,eAAehB,GAC7C,GAAIc,GAAgBf,EAAmB,SAC/BQ,EAAK,UAAGO,aAAH,EAAGA,EAAcG,mBAAjB,QAAgC,EACrCC,EAAM,UAAGJ,aAAH,EAAGA,EAAcK,oBAAjB,QAAiC,EAEvCC,EAAMX,YAlCC,eAmCVY,OAAO,OACPC,KAAK,SAAUJ,GACfI,KAAK,QAASf,GAuBjB,MAAO,CACLgB,EAvBQhB,GAASiB,IAAcC,KAAOD,IAAcE,OAwBpDC,EAvBQT,GAAUM,IAAcI,IAAMJ,IAAcK,QAwBpDC,KAvBWV,EACVC,OAAO,KACPC,KACC,YACA,aAAeE,IAAcC,KAAO,IAAMD,IAAcI,IAAM,QA0BhEf,EAAgB,WACDkB,YAAU,kBACVC,YAAW,kBAE9B,GAAIjC,GAAqBG,EAAQ,SACzB+B,EAAOlC,EAGPmC,EAAUD,EACbE,KAAI,SAACC,GAAD,uBAAOA,EAAEC,gBAAT,aAAqBC,KACzBC,OAAOC,KACJC,EAAQC,YAAOR,GACfX,EAAIoB,cAAYF,MAAM,CAAC,EAAGvC,EAAOqB,IAAIqB,OAAOH,GAG5CI,EAAYZ,EACfE,KAAI,SAACC,GAAD,OAAOA,EAAEU,wCACbP,OAAOC,KACJO,EAAiBL,YAAOG,GACvBG,EAAiCD,EAfT,GAeTE,EAAkBF,EAfT,GAgBzBpB,EAAIuB,cACPT,MAAM,WAACvC,aAAD,EAACA,EAAQyB,SAAT,QAAc,EAAG,IACvBiB,OAAO,CAACI,EAAeC,IAEpBE,EAAKD,cACRT,MAAM,WAACvC,aAAD,EAACA,EAAQyB,SAAT,QAAc,EAAG,IACvBiB,OAAO,CAAC,EAAG,MAERQ,EAAQC,cACXC,MAAMC,KACNhC,GAAE,SAAUa,GACX,OAAOb,EAAEa,EAAE,OAEZT,GAAE,SAAUS,GACGT,EAAES,EAAE,IAClB,OAAOT,EAAES,EAAE,OAKToB,GAFYtD,EAAO4B,KAAKT,OAAO,KAEftB,EACnBwC,QAAO,SAACkB,GAAD,OAAOA,EAAEX,wCAChBX,KACC,SAACsB,GAAD,MACE,CAACA,EAAEpB,SAAWoB,EAAEX,0CAMtB5C,WAAQ4B,KACLT,OAAO,KACPX,UAAU,OACVuB,KACClC,EAAkBwC,QAChB,SAACH,GAAD,OAAOA,EAAEsB,kDAGZC,QACAtC,OAAO,UACPC,KAAK,MAAM,SAAUc,GACpB,OAAOb,EAAEa,EAAEC,aAEZf,KAAK,MAAM,SAAUc,GACpB,OAAOe,EAAGf,EAAEsB,kDAEbpC,KAAK,IAAK,KACVsC,MAAM,OAAQ,OAEjB1D,EAAO4B,KACJT,OAAO,KACPX,UAAU,aACVuB,KAAK,CAACuB,IACNG,QACAtC,OAAO,KACPC,KAAK,QAAS,YACdD,OAAO,QACPC,KAAK,QAAS,QACdA,KAAK,KAAK,SAAUc,GACnB,IAAMyB,EAAIT,EAAMhB,GAEhB,OADA0B,QAAQC,IAAIF,GACLA,KAERD,MAAM,UAAU,SAAUxB,GACzB,MAAO,cAERd,KAAK,OAAQ,QAEhBpB,WAAQ4B,KACLT,OAAO,KACPC,KAAK,QAAS,gBACdA,KAAK,YAAa,eAAiBpB,EAAOyB,EAAI,KAC9CqC,KACCC,YAAW1C,GAAG2C,YAAW,SAAU9B,GACjC,IAQ0B+B,EARpBC,EAAoBpC,YAAW,OACnCqC,EAAerC,YAAW,OAC1BsC,EAAetC,YAAW,SAC1BuC,EAAavC,YAAW,SACxBwC,EAAYxC,YAAW,SACvByC,EAAazC,YAAW,SACxB0C,EAAc1C,YAAW,MACzB2C,EAAa3C,YAAW,MAkB1B,OAjB0BmC,EAiBP/B,GAhBPwC,YAAWT,GAAQA,EACvBC,EACAS,YAAWV,GAAQA,EACnBE,EACAS,YAASX,GAAQA,EACjBG,EACAS,YAAQZ,GAAQA,EAChBI,EACAS,YAAUb,GAAQA,EAClBc,YAASd,GAAQA,EACfK,EACAC,EACFS,YAASf,GAAQA,EACjBO,EACAC,GAAYR,OAM1BjE,EAAO4B,KACJT,OAAO,KACPC,KAAK,YAAa,qBAClBA,KAAK,QAAS,WACd0C,KAAKmB,YAAShC,IACd9B,OAAO,QACPC,KACC,YACA,0BACIpB,EAAOyB,EAAI,EACb,KACsB,IAArBH,IAAcC,KACf,KAEHH,KAAK,QAAS,SACdA,KAAK,cAAe,UACpBsC,MAAM,cAAe,UACrBA,MAAM,YAAa,QACnBtC,KAAK,IAAK,GACVA,KAAK,KAAM,SACXA,KAAK,OAAQ,OACb8D,KAAK,aAERlF,EAAO4B,KACJT,OAAO,KACPC,KAAK,QAAS,eAEdA,KAAK,QAAS,YAEd0C,KACCmB,YAASxD,GAAG0D,MACVC,KAAKC,IAAID,KAAKE,MAAMF,KAAKG,MAAMvF,EAAOyB,EAAI,IAAM,GAAIsB,GACpD,QAGH5B,OAAO,QACPC,KACC,YACA,0BACIpB,EAAOyB,EAAI,EACb,KACsB,IAArBH,IAAcC,KACf,KAEHH,KAAK,QAAS,SACdA,KAAK,cAAe,UACpBsC,MAAM,cAAe,UACrBA,MAAM,YAAa,QACnBtC,KAAK,IAAK,GACVA,KAAK,KAAM,SACXA,KAAK,OAAQ,QACb8D,KAAK,cACRlF,EAAO4B,KAAKpB,UAAU,kBAAkBY,KAAK,OAAQ,QACrDpB,EAAO4B,KAAKpB,UAAU,kBAAkBY,KAAK,SAAU,QAEvD,IAAMF,EAAMX,YAAO,oBAGnBW,EACGC,OAAO,UACPC,KAAK,KAAM,IACXA,KAAK,KAAM,IACXA,KAAK,IAAK,GACVsC,MAAM,OAAQ,OACjBxC,EACGC,OAAO,QACPC,KAAK,IAAK,IACVA,KAAK,IAAK,IACV8D,KAAK,kBACLxB,MAAM,YAAa,QACnBtC,KAAK,qBAAsB,UAC9BF,EACGC,OAAO,UACPC,KAAK,KAAM,KACXA,KAAK,KAAM,IACXA,KAAK,IAAK,GACVsC,MAAM,OAAQ,YAEjBxC,EACGC,OAAO,QACPC,KAAK,IAAK,KACVA,KAAK,IAAK,IACV8D,KAAK,cACLxB,MAAM,YAAa,QACnBtC,KAAK,qBAAsB,YAIlC,OACE,kBAAC,IAAD,KACE,yBAAKoE,UAAU,OACb,yBAAKA,UAAU,SAAS9B,MAAO,CAAE+B,UAAW,SAC1C,wBAAID,UAAU,cAAd,kBACA,yBAAKrF,GAAG,kBAAkBa,OAAO,KAAKX,MAAM,SAG9C,yBACEqD,MAAO,CACLgC,UAAW,SACXC,aAAc,oBACdC,QAAS,IACTH,UAAW,SAEbD,UAAS,aAxSA,cAwS0BK,QAAQ,IAAK,IAChD1F,GAAIL","file":"component---src-pages-d-3-wind-dashboard-tsx-70c00af308102d3bbb93.js","sourcesContent":["import React, { Component, useEffect, useState } from \"react\";\nimport { Container, Form, Checkbox } from \"semantic-ui-react\";\nimport { nest } from \"d3-collection\";\nimport { select } from \"d3-selection\";\nimport { timeParse, timeFormat } from \"d3-time-format\";\nimport {\n  timeSecond,\n  timeMinute,\n  timeHour,\n  timeDay,\n  timeMonth,\n  timeWeek,\n  timeYear,\n} from \"d3-time\";\nimport { max, min, extent } from \"d3-array\";\nimport { scaleOrdinal, scaleTime, scaleLinear } from \"d3-scale\";\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\nimport { line, area, curveNatural, curveStepAfter } from \"d3-shape\";\nimport { axisBottom, axisLeft } from \"d3-axis\";\nimport { MergedWeatherDataType, removeUndefined } from \"../api/weatherData\";\nimport { CanvasType, defaultCanvas } from \"../utils/canvas\";\nimport { useDetectElementResize } from \"use-element-resize\";\n\nconst wrapperDiv = \".graph-wind\";\n\nfunction WindDashboard({\n  mergedWeatherData,\n}: {\n  mergedWeatherData: MergedWeatherDataType[] | undefined;\n}) {\n  const targetId = \"graph-canvas-wind\";\n  const [canvas, setCanvas] = useState<CanvasType>();\n  const target = { id: targetId };\n  const [width, height] = useDetectElementResize(target);\n\n  const clearGraph = () => {\n    select(wrapperDiv).selectAll(\"*\").remove();\n  };\n\n  useEffect(() => {\n    clearGraph();\n    const canvas = scaffoldCanvas();\n    if (canvas) {\n      setCanvas(canvas);\n    }\n  }, [mergedWeatherData, width]);\n\n  useEffect(() => {\n    populateGraph();\n  }, [canvas]);\n\n  const scaffoldCanvas = (): CanvasType | undefined => {\n    const containerDiv = document.getElementById(targetId);\n    if (containerDiv && mergedWeatherData) {\n      const width = containerDiv?.clientWidth ?? 0;\n      const height = containerDiv?.clientHeight ?? 0;\n      debugger;\n      const svg = select(wrapperDiv)\n        .append(\"svg\")\n        .attr(\"height\", height)\n        .attr(\"width\", width);\n      const x = width - (defaultCanvas.left + defaultCanvas.right);\n      const y = height - (defaultCanvas.top + defaultCanvas.bottom);\n      const node = svg\n        .append(\"g\")\n        .attr(\n          \"transform\",\n          \"translate(\" + defaultCanvas.left + \",\" + defaultCanvas.top + \")\"\n        );\n      // const dataset: {\n      //   key: string;\n      //   values: any;\n      //   value: undefined;\n      // }[] = nest<MergedWeatherDataType>()\n      //   .key(function () {\n      //     return \"Temperature\";\n      //   })\n      //   .rollup((d: MergedWeatherDataType[]) => {\n      //     console.log(d);\n      //     debugger;\n      //     return d[0] as MergedWeatherDataType;\n      //   })\n      //   .entries(mergedWeatherData);\n      return {\n        x,\n        y,\n        node,\n        // dataset,\n      };\n    }\n    return undefined;\n  };\n\n  const populateGraph = () => {\n    const _timeParse = timeParse(\"%Y-%m-%dT%H:%M\");\n    const formatTime = timeFormat(\"%Y-%m-%dT%H:%M\");\n\n    if (mergedWeatherData && canvas) {\n      const data = mergedWeatherData;\n\n      /** Time on x axis */\n      const DateArr = data\n        .map((d) => d.datetime ?? undefined)\n        .filter(removeUndefined);\n      const range = extent(DateArr) as [Date, Date];\n      const x = scaleTime().range([0, canvas.x]).domain(range);\n\n      /** Temp on y axis */\n      const windSpeed = data\n        .map((d) => d.wind_speed_at_10m_above_ground_level)\n        .filter(removeUndefined);\n      const windSpeedRange = extent(windSpeed) as [number, number];\n      const [lowestWindSpd, highestWindSpd] = windSpeedRange;\n      const y = scaleLinear()\n        .range([canvas?.y ?? 0, 0])\n        .domain([lowestWindSpd, highestWindSpd]);\n\n      const y1 = scaleLinear()\n        .range([canvas?.y ?? 0, 0])\n        .domain([0, 360]);\n\n      const _line = line<[Date, number]>()\n        .curve(curveNatural)\n        .x(function (d) {\n          return x(d[0]);\n        })\n        .y(function (d) {\n          const yAxis = y(d[1]);\n          return y(d[1]);\n        });\n\n      const lineGraph = canvas.node.append(\"g\");\n\n      const windSpeedData = mergedWeatherData\n        .filter((a) => a.wind_speed_at_10m_above_ground_level)\n        .map(\n          (a) =>\n            [a.datetime!, a.wind_speed_at_10m_above_ground_level!] as [\n              Date,\n              number\n            ]\n        );\n\n      canvas?.node\n        .append(\"g\")\n        .selectAll(\"dot\")\n        .data(\n          mergedWeatherData.filter(\n            (d) => d.wind_from_direction_at_10m_above_ground_level\n          )\n        )\n        .enter()\n        .append(\"circle\")\n        .attr(\"cx\", function (d: MergedWeatherDataType) {\n          return x(d.datetime!);\n        })\n        .attr(\"cy\", function (d: MergedWeatherDataType) {\n          return y1(d.wind_from_direction_at_10m_above_ground_level!);\n        })\n        .attr(\"r\", 1.5)\n        .style(\"fill\", \"red\");\n\n      canvas.node\n        .append(\"g\")\n        .selectAll(\".location\")\n        .data([windSpeedData])\n        .enter()\n        .append(\"g\")\n        .attr(\"class\", \"location\")\n        .append(\"path\")\n        .attr(\"class\", \"line\")\n        .attr(\"d\", function (d) {\n          const t = _line(d);\n          console.log(t);\n          return t;\n        })\n        .style(\"stroke\", function (d) {\n          return \"darkBlue\";\n        })\n        .attr(\"fill\", \"none\");\n\n      canvas?.node\n        .append(\"g\")\n        .attr(\"class\", \"axis axis--x\")\n        .attr(\"transform\", \"translate(0,\" + canvas.y + \")\")\n        .call(\n          axisBottom(x).tickFormat(function (d) {\n            const formatMillisecond = timeFormat(\".%L\"),\n              formatSecond = timeFormat(\":%S\"),\n              formatMinute = timeFormat(\"%H:%M\"),\n              formatHour = timeFormat(\"%H:00\"),\n              formatDay = timeFormat(\"%a %d\"),\n              formatWeek = timeFormat(\"%b %d\"),\n              formatMonth = timeFormat(\"%B\"),\n              formatYear = timeFormat(\"%Y\"),\n              multiFormat = function (date: Date) {\n                return (timeSecond(date) < date\n                  ? formatMillisecond\n                  : timeMinute(date) < date\n                  ? formatSecond\n                  : timeHour(date) < date\n                  ? formatMinute\n                  : timeDay(date) < date\n                  ? formatHour\n                  : timeMonth(date) < date\n                  ? timeWeek(date) < date\n                    ? formatDay\n                    : formatWeek\n                  : timeYear(date) < date\n                  ? formatMonth\n                  : formatYear)(date);\n              };\n            return multiFormat(d);\n          })\n        );\n\n      canvas.node\n        .append(\"g\")\n        .attr(\"transform\", \"translate(475, 0)\")\n        .attr(\"class\", \"axisRed\")\n        .call(axisLeft(y1))\n        .append(\"text\")\n        .attr(\n          \"transform\",\n          \"rotate(-90) translate(\" +\n            -(canvas.y / 2) +\n            \", \" +\n            -defaultCanvas.left * 0.8 +\n            \")\"\n        )\n        .attr(\"class\", \"label\")\n        .attr(\"text-anchor\", \"middle\")\n        .style(\"font-weight\", \"normal\")\n        .style(\"font-size\", \"12px\")\n        .attr(\"y\", 6)\n        .attr(\"dy\", \".35em\")\n        .attr(\"fill\", \"red\")\n        .text(\"Direction\");\n\n      canvas.node\n        .append(\"g\")\n        .attr(\"class\", \"axis y-axis\")\n\n        .attr(\"class\", \"axisBlue\")\n\n        .call(\n          axisLeft(y).ticks(\n            Math.min(Math.round(Math.floor(canvas.y / 35) + 1), highestWindSpd),\n            \".0f\"\n          )\n        )\n        .append(\"text\")\n        .attr(\n          \"transform\",\n          \"rotate(-90) translate(\" +\n            -(canvas.y / 2) +\n            \", \" +\n            -defaultCanvas.left * 0.8 +\n            \")\"\n        )\n        .attr(\"class\", \"label\")\n        .attr(\"text-anchor\", \"middle\")\n        .style(\"font-weight\", \"normal\")\n        .style(\"font-size\", \"12px\")\n        .attr(\"y\", 6)\n        .attr(\"dy\", \".35em\")\n        .attr(\"fill\", \"#666\")\n        .text(\"Wind Speed\");\n      canvas.node.selectAll(\".y-axis g text\").attr(\"fill\", \"#666\");\n      canvas.node.selectAll(\".y-axis g line\").attr(\"stroke\", \"#666\");\n\n      const svg = select(\"#my_dataviz-wind\");\n\n      // Handmade legend\n      svg\n        .append(\"circle\")\n        .attr(\"cx\", 10)\n        .attr(\"cy\", 10)\n        .attr(\"r\", 6)\n        .style(\"fill\", \"red\");\n      svg\n        .append(\"text\")\n        .attr(\"x\", 20)\n        .attr(\"y\", 10)\n        .text(\"Wind Direction\")\n        .style(\"font-size\", \"15px\")\n        .attr(\"alignment-baseline\", \"middle\");\n      svg\n        .append(\"circle\")\n        .attr(\"cx\", 150)\n        .attr(\"cy\", 10)\n        .attr(\"r\", 6)\n        .style(\"fill\", \"darkBlue\");\n\n      svg\n        .append(\"text\")\n        .attr(\"x\", 170)\n        .attr(\"y\", 10)\n        .text(\"Wind Speed\")\n        .style(\"font-size\", \"15px\")\n        .attr(\"alignment-baseline\", \"middle\");\n    }\n  };\n\n  return (\n    <Container>\n      <div className=\"App\">\n        <div className=\"header\" style={{ minHeight: \"70px\" }}>\n          <h3 className=\"text-muted\">Wind Dashboard</h3>\n          <svg id=\"my_dataviz-wind\" height=\"30\" width=\"450\"></svg>\n        </div>\n\n        <div\n          style={{\n            textAlign: \"center\",\n            borderBottom: \"1px solid #e5e5e5\",\n            padding: \"0\",\n            minHeight: \"300px\",\n          }}\n          className={`jumbotron ${wrapperDiv.replace(\".\", \"\")}`}\n          id={targetId}\n        />\n      </div>\n    </Container>\n  );\n}\n\nexport default WindDashboard;\n"],"sourceRoot":""}